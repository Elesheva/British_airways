import telebot
from telebot import types
import pandas as pd
import config
#import http.client
import json
from sklearn.model_selection import train_test_split
import conf
import matplotlib.pyplot as plt
import os

bot = telebot.TeleBot(conf.token)

df_subset = None

# –ü–†–ò–í–ï–¢–°–í–ò–ï 
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="terms&conditions"))
    lastname = message.from_user.last_name
    if lastname is None:
        bot.send_message(message.chat.id,
                         f"{message.chat.first_name} üëã \n"
                         , reply_markup=markup)
    else:
        bot.send_message(message.chat.id,
                         f"{message.chat.first_name} {lastname} üëã \n"
                         , reply_markup=markup)
        
@bot.message_handler(commands=['csv'])
def csv_fail(message):
    bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:")
    bot.send_document(message.chat.id, open("C:/Users/vikto/Downloads/titanic.csv", "rb"))
                     
    bot.send_message(message.chat.id,
                         "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞.\n !–î–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —Å–±–æ—Ä –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n –ï—Å–ª–∏ —É –≤–∞—Å –∏–º–µ–µ—Ç—Å—è —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç, –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ñ–∞–π–ª –≤ —á–∞—Ç –±–æ—Ç–∞.")
    bot.register_next_step_handler(message, lambda msg: handle_document(msg))
    
def is_csv_file(file_name):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    return file_name.endswith('.csv')
    
def handle_document(message):
    if message.document:
        file_name = message.document.file_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv
        if is_csv_file(file_name):
            # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É CSV —Ñ–∞–π–ª–∞
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            with open(file_name, 'wb') as new_file:
                new_file.write(downloaded_file)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–∞
            try:
                df = pd.read_csv(file_name)
                bot.send_message(message.chat.id,"CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                header = list(df.columns)
                types_element = list(df.dtypes)
                print(df.columns)
                bot.send_message(message.chat.id, "–í –≤–∞—à–µ–º —Ñ–∞–π–ª–µ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                for i in range(len(header)):
                    bot.send_message(message.chat.id, f"\n{i+1}) {header[i]}, {types_element[i]}")
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å (–ü—Ä–∏–º–µ—Ä: 1 2 3)")
                bot.register_next_step_handler(message, lambda msg: parametr(msg, df))
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV —Ñ–∞–π–ª–∞:", e)
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")
            bot.register_next_step_handler(message, lambda msg: handle_document(msg))
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
        bot.register_next_step_handler(message, lambda msg: handle_document(msg))
        
        
def parametr(message, df):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—É—Å—Ç
    text = message.text.split()
    print(text)
    if text:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            indices = [int(i) - 1 for i in text] 
            
            if all(0 <= index < df.shape[1] for index in indices):
                subset = df.iloc[:, indices]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
                print(subset)
            
                if len(subset)> 500:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    btn1 = types.KeyboardButton("–ü—Ä–æ—Å—Ç–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞")
                    btn2 = types.KeyboardButton("–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–±–æ—Ä–∫–∞")
                    btn3 = types.KeyboardButton("–°—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è (—Ä–∞—Å—Å–ª–æ—ë–Ω–Ω–∞—è) –≤—ã–±–æ—Ä–∫–∞")
                    btn4 = types.KeyboardButton("–ö–ª–∞—Å—Ç–µ—Ä–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞")
                    markup.add(btn1, btn2, btn3, btn4)
                    bot.send_message(message.chat.id, "\n\n–ö–∞–∫—É—é –≤—ã–±–æ—Ä–∫—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)
                    bot.register_next_step_handler(message, lambda msg: btn(msg, subset, indices, df))
                else:
                    bot.send_message(message.chat.id, f"{subset}\n\n–í–∞—à —Å–∞–±—Å–µ—Ç –≥–æ—Ç–æ–≤.\n")
            else:
                bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
        
        
def btn(message, subset, indices, df):
    global df_subset
    if (message.text == "–ü—Ä–æ—Å—Ç–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞"):
        df_subset = subset.sample(n=100)
        print(df_subset)
        bot.send_message(message.chat.id, f"{df_subset}\n–ú—ã –≤—ã–±—Ä–∞–ª–∏ 100 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
    elif (message.text == "–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–±–æ—Ä–∫–∞"):
        df_subset = subset.iloc[range(0, len(subset), 10)]
        bot.send_message(message.chat.id, f"{df_subset}\n–ú—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–∂–¥—É—é 10-—é —Å—Ç—Ä–æ–∫—É")
        print(df_subset)
    elif (message.text == "–°—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è (—Ä–∞—Å—Å–ª–æ—ë–Ω–Ω–∞—è) –≤—ã–±–æ—Ä–∫–∞"):
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å—Ç—Ä–∞—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:")
        header = list(subset.columns)
        types_element = list(subset.dtypes)
        for i in range(len(header)):
            bot.send_message(message.chat.id, f"\n{i+1}) {header[i]}, {types_element[i]}")
            bot.register_next_step_handler(message, lambda msg:  stratificic(msg, subset))
    elif (message.text == "–ö–ª–∞—Å—Ç–µ—Ä–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞"):
        pass
    
    
def stratificic(message, subset):
    global df_subset
    text = message.text.split()      
    if text:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            indices = [int(i) - 1 for i in text] 
             
            if all(0 <= index < subset.shape[1] for index in indices):
                df_subset = subset.iloc[:, indices]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
                print(df_subset)
                bot.send_message(message.chat.id, f"{df_subset
        }")
                
        
        finally:
            print(Exception())
                
@bot.message_handler(commands=['clean'])
def clean(message):
    null_subset = df_subset.isnull().sum() #–ü—Ä–æ–ø—É—Å–∫–∏
    duplic = df_subset.duplicated().sum() #–î—É–±–ª–∏
    NA_subset = df_subset.isna().sum() #NA
    
    
    bot.send_message(message.chat.id, f"–ü—Ä–æ–ø—É—Å–∫–∏:/n/n{null_subset}")     
    bot.send_message(message.chat.id, f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:/n/n{duplic}")
    
      
            
            
            
@bot.message_handler(commands=['Descriptive_statistics'])
def opisatelnaya_statistica(message):
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    mode = df_subset.mode()  # –ú–æ–¥–∞
    median = df_subset.median()  # –ú–µ–¥–∏–∞–Ω–∞
    mean = df_subset.mean()  # –°—Ä–µ–¥–Ω–µ–µ
    std_dev = df_subset.std()  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    min_value = df_subset.min()  # –ú–∏–Ω–∏–º—É–º
    max_value = df_subset.max()  # –ú–∞–∫—Å–∏–º—É–º
    
    #–û–ü–ò–°–ê–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–´–í–û–î
    bot.send_message(message.chat.id, f"–ú–æ–¥–∞:\n{mode}")
    bot.send_message(message.chat.id, f"\n–ú–µ–¥–∏–∞–Ω–∞:\n{median}")
    bot.send_message(message.chat.id, f"\n–°—Ä–µ–¥–Ω–µ–µ:\n{mean}")
    bot.send_message(message.chat.id, f"\n–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:\n{std_dev}")
    bot.send_message(message.chat.id, f"\n–ú–∏–Ω–∏–º—É–º:\n{min_value}")
    bot.send_message(message.chat.id, f"\n–ú–∞–∫—Å–∏–º—É–º:\n{max_value}")
            





    
@bot.message_handler(commands=['scatter'])
def scatter_plot(message):
    #–î–ò–ê–ì–†–ê–ú–ú–ê –†–ê–°–°–ï–Ø–ù–ò–Ø
    plt.figure(figsize=(10, 6))
    colors = {'male': 'blue', 'female': 'red'}
    df_subset['–¶–≤–µ—Ç'] = df['Sex'].map(colors)
    subset.dropna()
    plt.scatter(subset[subset.columns[1]], subset[subset.columns[0]], alpha=0.6, c=subset['–¶–≤–µ—Ç'])
    plt.title('–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è: ')
    plt.xlabel('')
    plt.ylabel('')
    plt.grid()
    plt.savefig('plot.png')
    with open('plot.png', 'rb') as file:
        bot.send_photo(message.chat.id, photo=file)
    plt.show()
    os.remove('plot.png')

                    
            
        
        

        
        
        
        
        
bot.polling(none_stop=True)